// Code generated by protoc-gen-go.
// source: dnsmessage.proto
// DO NOT EDIT!

/*
Package dnsmessage is a generated protocol buffer package.

It is generated from these files:
	dnsmessage.proto

It has these top-level messages:
	PBDNSMessage
*/
package dnsmessage

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type PBDNSMessage_Type int32

const (
	PBDNSMessage_DNSQueryType    PBDNSMessage_Type = 1
	PBDNSMessage_DNSResponseType PBDNSMessage_Type = 2
)

var PBDNSMessage_Type_name = map[int32]string{
	1: "DNSQueryType",
	2: "DNSResponseType",
}
var PBDNSMessage_Type_value = map[string]int32{
	"DNSQueryType":    1,
	"DNSResponseType": 2,
}

func (x PBDNSMessage_Type) Enum() *PBDNSMessage_Type {
	p := new(PBDNSMessage_Type)
	*p = x
	return p
}
func (x PBDNSMessage_Type) String() string {
	return proto.EnumName(PBDNSMessage_Type_name, int32(x))
}
func (x *PBDNSMessage_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PBDNSMessage_Type_value, data, "PBDNSMessage_Type")
	if err != nil {
		return err
	}
	*x = PBDNSMessage_Type(value)
	return nil
}
func (PBDNSMessage_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type PBDNSMessage_SocketFamily int32

const (
	PBDNSMessage_INET  PBDNSMessage_SocketFamily = 1
	PBDNSMessage_INET6 PBDNSMessage_SocketFamily = 2
)

var PBDNSMessage_SocketFamily_name = map[int32]string{
	1: "INET",
	2: "INET6",
}
var PBDNSMessage_SocketFamily_value = map[string]int32{
	"INET":  1,
	"INET6": 2,
}

func (x PBDNSMessage_SocketFamily) Enum() *PBDNSMessage_SocketFamily {
	p := new(PBDNSMessage_SocketFamily)
	*p = x
	return p
}
func (x PBDNSMessage_SocketFamily) String() string {
	return proto.EnumName(PBDNSMessage_SocketFamily_name, int32(x))
}
func (x *PBDNSMessage_SocketFamily) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PBDNSMessage_SocketFamily_value, data, "PBDNSMessage_SocketFamily")
	if err != nil {
		return err
	}
	*x = PBDNSMessage_SocketFamily(value)
	return nil
}
func (PBDNSMessage_SocketFamily) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 1} }

type PBDNSMessage_SocketProtocol int32

const (
	PBDNSMessage_UDP PBDNSMessage_SocketProtocol = 1
	PBDNSMessage_TCP PBDNSMessage_SocketProtocol = 2
)

var PBDNSMessage_SocketProtocol_name = map[int32]string{
	1: "UDP",
	2: "TCP",
}
var PBDNSMessage_SocketProtocol_value = map[string]int32{
	"UDP": 1,
	"TCP": 2,
}

func (x PBDNSMessage_SocketProtocol) Enum() *PBDNSMessage_SocketProtocol {
	p := new(PBDNSMessage_SocketProtocol)
	*p = x
	return p
}
func (x PBDNSMessage_SocketProtocol) String() string {
	return proto.EnumName(PBDNSMessage_SocketProtocol_name, int32(x))
}
func (x *PBDNSMessage_SocketProtocol) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PBDNSMessage_SocketProtocol_value, data, "PBDNSMessage_SocketProtocol")
	if err != nil {
		return err
	}
	*x = PBDNSMessage_SocketProtocol(value)
	return nil
}
func (PBDNSMessage_SocketProtocol) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 2}
}

type PBDNSMessage struct {
	Type                    *PBDNSMessage_Type           `protobuf:"varint,1,req,name=type,enum=PBDNSMessage_Type" json:"type,omitempty"`
	MessageId               []byte                       `protobuf:"bytes,2,opt,name=messageId" json:"messageId,omitempty"`
	ServerIdentity          []byte                       `protobuf:"bytes,3,opt,name=serverIdentity" json:"serverIdentity,omitempty"`
	SocketFamily            *PBDNSMessage_SocketFamily   `protobuf:"varint,4,opt,name=socketFamily,enum=PBDNSMessage_SocketFamily" json:"socketFamily,omitempty"`
	SocketProtocol          *PBDNSMessage_SocketProtocol `protobuf:"varint,5,opt,name=socketProtocol,enum=PBDNSMessage_SocketProtocol" json:"socketProtocol,omitempty"`
	From                    []byte                       `protobuf:"bytes,6,opt,name=from" json:"from,omitempty"`
	To                      []byte                       `protobuf:"bytes,7,opt,name=to" json:"to,omitempty"`
	InBytes                 *uint64                      `protobuf:"varint,8,opt,name=inBytes" json:"inBytes,omitempty"`
	TimeSec                 *uint32                      `protobuf:"varint,9,opt,name=timeSec" json:"timeSec,omitempty"`
	TimeUsec                *uint32                      `protobuf:"varint,10,opt,name=timeUsec" json:"timeUsec,omitempty"`
	Id                      *uint32                      `protobuf:"varint,11,opt,name=id" json:"id,omitempty"`
	Question                *PBDNSMessage_DNSQuestion    `protobuf:"bytes,12,opt,name=question" json:"question,omitempty"`
	Response                *PBDNSMessage_DNSResponse    `protobuf:"bytes,13,opt,name=response" json:"response,omitempty"`
	OriginalRequestorSubnet []byte                       `protobuf:"bytes,14,opt,name=originalRequestorSubnet" json:"originalRequestorSubnet,omitempty"`
	XXX_unrecognized        []byte                       `json:"-"`
}

func (m *PBDNSMessage) Reset()                    { *m = PBDNSMessage{} }
func (m *PBDNSMessage) String() string            { return proto.CompactTextString(m) }
func (*PBDNSMessage) ProtoMessage()               {}
func (*PBDNSMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PBDNSMessage) GetType() PBDNSMessage_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return PBDNSMessage_DNSQueryType
}

func (m *PBDNSMessage) GetMessageId() []byte {
	if m != nil {
		return m.MessageId
	}
	return nil
}

func (m *PBDNSMessage) GetServerIdentity() []byte {
	if m != nil {
		return m.ServerIdentity
	}
	return nil
}

func (m *PBDNSMessage) GetSocketFamily() PBDNSMessage_SocketFamily {
	if m != nil && m.SocketFamily != nil {
		return *m.SocketFamily
	}
	return PBDNSMessage_INET
}

func (m *PBDNSMessage) GetSocketProtocol() PBDNSMessage_SocketProtocol {
	if m != nil && m.SocketProtocol != nil {
		return *m.SocketProtocol
	}
	return PBDNSMessage_UDP
}

func (m *PBDNSMessage) GetFrom() []byte {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *PBDNSMessage) GetTo() []byte {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *PBDNSMessage) GetInBytes() uint64 {
	if m != nil && m.InBytes != nil {
		return *m.InBytes
	}
	return 0
}

func (m *PBDNSMessage) GetTimeSec() uint32 {
	if m != nil && m.TimeSec != nil {
		return *m.TimeSec
	}
	return 0
}

func (m *PBDNSMessage) GetTimeUsec() uint32 {
	if m != nil && m.TimeUsec != nil {
		return *m.TimeUsec
	}
	return 0
}

func (m *PBDNSMessage) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PBDNSMessage) GetQuestion() *PBDNSMessage_DNSQuestion {
	if m != nil {
		return m.Question
	}
	return nil
}

func (m *PBDNSMessage) GetResponse() *PBDNSMessage_DNSResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *PBDNSMessage) GetOriginalRequestorSubnet() []byte {
	if m != nil {
		return m.OriginalRequestorSubnet
	}
	return nil
}

type PBDNSMessage_DNSQuestion struct {
	QName            *string `protobuf:"bytes,1,opt,name=qName" json:"qName,omitempty"`
	QType            *uint32 `protobuf:"varint,2,opt,name=qType" json:"qType,omitempty"`
	QClass           *uint32 `protobuf:"varint,3,opt,name=qClass" json:"qClass,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PBDNSMessage_DNSQuestion) Reset()                    { *m = PBDNSMessage_DNSQuestion{} }
func (m *PBDNSMessage_DNSQuestion) String() string            { return proto.CompactTextString(m) }
func (*PBDNSMessage_DNSQuestion) ProtoMessage()               {}
func (*PBDNSMessage_DNSQuestion) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

func (m *PBDNSMessage_DNSQuestion) GetQName() string {
	if m != nil && m.QName != nil {
		return *m.QName
	}
	return ""
}

func (m *PBDNSMessage_DNSQuestion) GetQType() uint32 {
	if m != nil && m.QType != nil {
		return *m.QType
	}
	return 0
}

func (m *PBDNSMessage_DNSQuestion) GetQClass() uint32 {
	if m != nil && m.QClass != nil {
		return *m.QClass
	}
	return 0
}

type PBDNSMessage_DNSResponse struct {
	Rcode            *uint32                           `protobuf:"varint,1,opt,name=rcode" json:"rcode,omitempty"`
	Rrs              []*PBDNSMessage_DNSResponse_DNSRR `protobuf:"bytes,2,rep,name=rrs" json:"rrs,omitempty"`
	AppliedPolicy    *string                           `protobuf:"bytes,3,opt,name=appliedPolicy" json:"appliedPolicy,omitempty"`
	Tags             []string                          `protobuf:"bytes,4,rep,name=tags" json:"tags,omitempty"`
	QueryTimeSec     *uint32                           `protobuf:"varint,5,opt,name=queryTimeSec" json:"queryTimeSec,omitempty"`
	QueryTimeUsec    *uint32                           `protobuf:"varint,6,opt,name=queryTimeUsec" json:"queryTimeUsec,omitempty"`
	XXX_unrecognized []byte                            `json:"-"`
}

func (m *PBDNSMessage_DNSResponse) Reset()                    { *m = PBDNSMessage_DNSResponse{} }
func (m *PBDNSMessage_DNSResponse) String() string            { return proto.CompactTextString(m) }
func (*PBDNSMessage_DNSResponse) ProtoMessage()               {}
func (*PBDNSMessage_DNSResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 1} }

func (m *PBDNSMessage_DNSResponse) GetRcode() uint32 {
	if m != nil && m.Rcode != nil {
		return *m.Rcode
	}
	return 0
}

func (m *PBDNSMessage_DNSResponse) GetRrs() []*PBDNSMessage_DNSResponse_DNSRR {
	if m != nil {
		return m.Rrs
	}
	return nil
}

func (m *PBDNSMessage_DNSResponse) GetAppliedPolicy() string {
	if m != nil && m.AppliedPolicy != nil {
		return *m.AppliedPolicy
	}
	return ""
}

func (m *PBDNSMessage_DNSResponse) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *PBDNSMessage_DNSResponse) GetQueryTimeSec() uint32 {
	if m != nil && m.QueryTimeSec != nil {
		return *m.QueryTimeSec
	}
	return 0
}

func (m *PBDNSMessage_DNSResponse) GetQueryTimeUsec() uint32 {
	if m != nil && m.QueryTimeUsec != nil {
		return *m.QueryTimeUsec
	}
	return 0
}

type PBDNSMessage_DNSResponse_DNSRR struct {
	Name             *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Type             *uint32 `protobuf:"varint,2,opt,name=type" json:"type,omitempty"`
	Class            *uint32 `protobuf:"varint,3,opt,name=class" json:"class,omitempty"`
	Ttl              *uint32 `protobuf:"varint,4,opt,name=ttl" json:"ttl,omitempty"`
	Rdata            []byte  `protobuf:"bytes,5,opt,name=rdata" json:"rdata,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PBDNSMessage_DNSResponse_DNSRR) Reset()         { *m = PBDNSMessage_DNSResponse_DNSRR{} }
func (m *PBDNSMessage_DNSResponse_DNSRR) String() string { return proto.CompactTextString(m) }
func (*PBDNSMessage_DNSResponse_DNSRR) ProtoMessage()    {}
func (*PBDNSMessage_DNSResponse_DNSRR) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 1, 0}
}

func (m *PBDNSMessage_DNSResponse_DNSRR) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *PBDNSMessage_DNSResponse_DNSRR) GetType() uint32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *PBDNSMessage_DNSResponse_DNSRR) GetClass() uint32 {
	if m != nil && m.Class != nil {
		return *m.Class
	}
	return 0
}

func (m *PBDNSMessage_DNSResponse_DNSRR) GetTtl() uint32 {
	if m != nil && m.Ttl != nil {
		return *m.Ttl
	}
	return 0
}

func (m *PBDNSMessage_DNSResponse_DNSRR) GetRdata() []byte {
	if m != nil {
		return m.Rdata
	}
	return nil
}

func init() {
	proto.RegisterType((*PBDNSMessage)(nil), "PBDNSMessage")
	proto.RegisterType((*PBDNSMessage_DNSQuestion)(nil), "PBDNSMessage.DNSQuestion")
	proto.RegisterType((*PBDNSMessage_DNSResponse)(nil), "PBDNSMessage.DNSResponse")
	proto.RegisterType((*PBDNSMessage_DNSResponse_DNSRR)(nil), "PBDNSMessage.DNSResponse.DNSRR")
	proto.RegisterEnum("PBDNSMessage_Type", PBDNSMessage_Type_name, PBDNSMessage_Type_value)
	proto.RegisterEnum("PBDNSMessage_SocketFamily", PBDNSMessage_SocketFamily_name, PBDNSMessage_SocketFamily_value)
	proto.RegisterEnum("PBDNSMessage_SocketProtocol", PBDNSMessage_SocketProtocol_name, PBDNSMessage_SocketProtocol_value)
}

var fileDescriptor0 = []byte{
	// 490 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x52, 0xdb, 0x6e, 0xd3, 0x40,
	0x10, 0x55, 0x62, 0x27, 0x4d, 0x26, 0x6b, 0x37, 0x2c, 0xb7, 0x25, 0x42, 0x6a, 0x14, 0x5e, 0x22,
	0x01, 0x11, 0x8a, 0x10, 0x2f, 0xbc, 0xb5, 0x05, 0x29, 0x0f, 0x44, 0x26, 0x49, 0x3f, 0xc0, 0xd8,
	0x4b, 0xb4, 0xc2, 0xf6, 0x3a, 0xbb, 0x5b, 0x24, 0xff, 0x1b, 0x9f, 0xc4, 0x47, 0x30, 0x1e, 0x9b,
	0x36, 0x41, 0xf4, 0x6d, 0xf6, 0xec, 0x39, 0x33, 0x67, 0x2e, 0x30, 0x4e, 0x0b, 0x9b, 0x4b, 0x6b,
	0xe3, 0xbd, 0x5c, 0x94, 0x46, 0x3b, 0x3d, 0xfb, 0xd5, 0x07, 0x16, 0x5d, 0x5e, 0xaf, 0xb7, 0x5f,
	0x1a, 0x98, 0x4f, 0xc1, 0x77, 0x55, 0x29, 0x45, 0x67, 0xda, 0x9d, 0x87, 0x4b, 0xbe, 0x38, 0xfe,
	0x5c, 0xec, 0xf0, 0x87, 0x3f, 0x82, 0x61, 0x9b, 0x63, 0x95, 0x8a, 0xee, 0xb4, 0x33, 0x67, 0xfc,
	0x19, 0x84, 0x56, 0x9a, 0x9f, 0xd2, 0xac, 0x52, 0x59, 0x38, 0xe5, 0x2a, 0xe1, 0x11, 0xfe, 0x0e,
	0x98, 0xd5, 0xc9, 0x0f, 0xe9, 0x3e, 0xc7, 0xb9, 0xca, 0x2a, 0xe1, 0x23, 0x1a, 0x2e, 0x27, 0xa7,
	0x49, 0xb7, 0x47, 0x0c, 0xfe, 0x1e, 0x33, 0xd1, 0x3b, 0xaa, 0xed, 0x25, 0x3a, 0x13, 0x3d, 0xd2,
	0xbc, 0xfc, 0x9f, 0xe6, 0x2f, 0x87, 0x33, 0xf0, 0xbf, 0x1b, 0x9d, 0x8b, 0x3e, 0x55, 0x05, 0xe8,
	0x3a, 0x2d, 0xce, 0x28, 0x3e, 0x87, 0x33, 0x55, 0x5c, 0x56, 0x4e, 0x5a, 0x31, 0x40, 0xc0, 0xaf,
	0x01, 0xa7, 0x72, 0xb9, 0x95, 0x89, 0x18, 0x22, 0x10, 0xf0, 0x31, 0x0c, 0x6a, 0xe0, 0xc6, 0x22,
	0x02, 0x84, 0xa0, 0x5e, 0xa5, 0x62, 0x44, 0xf1, 0x6b, 0x18, 0x1c, 0x6e, 0xa5, 0x75, 0x4a, 0x17,
	0x82, 0x21, 0x32, 0x5a, 0xbe, 0x38, 0x75, 0x82, 0xe1, 0xd7, 0x96, 0x50, 0x93, 0x8d, 0xb4, 0xa5,
	0x2e, 0xac, 0x14, 0xc1, 0x03, 0xe4, 0x4d, 0x4b, 0xe0, 0x17, 0xf0, 0x5c, 0x1b, 0xb5, 0x57, 0x45,
	0x9c, 0x6d, 0x24, 0xd5, 0xd0, 0x66, 0x7b, 0xfb, 0xad, 0x90, 0x4e, 0x84, 0xb5, 0xf5, 0xc9, 0x47,
	0x18, 0x1d, 0x27, 0x0f, 0xa0, 0x77, 0x58, 0xc7, 0x79, 0xbd, 0x99, 0xce, 0x7c, 0x48, 0xcf, 0x7a,
	0x1d, 0xb4, 0x81, 0x80, 0x87, 0xd0, 0x3f, 0x5c, 0x65, 0xb1, 0xb5, 0x34, 0xf9, 0x60, 0xf2, 0xbb,
	0x43, 0xea, 0xbb, 0x6a, 0x48, 0x37, 0x89, 0x4e, 0x1b, 0x75, 0xc0, 0xdf, 0x80, 0x67, 0x8c, 0x45,
	0xad, 0x87, 0x26, 0x2f, 0x1e, 0x34, 0x49, 0xf1, 0x86, 0x3f, 0x85, 0x20, 0x2e, 0xcb, 0x4c, 0xc9,
	0x34, 0xd2, 0x99, 0x4a, 0x9a, 0xed, 0x0e, 0xeb, 0xa9, 0xbb, 0x78, 0x6f, 0x71, 0xab, 0x1e, 0xbe,
	0x9e, 0x00, 0xc3, 0x2e, 0x4c, 0xb5, 0x6b, 0xa7, 0xdb, 0xa3, 0x42, 0x28, 0xbd, 0x43, 0x69, 0xc4,
	0x7d, 0xb2, 0xb7, 0x86, 0x5e, 0x93, 0x1a, 0x73, 0x14, 0xf7, 0x4d, 0xb1, 0xf6, 0xf8, 0x9a, 0x9e,
	0xd0, 0x73, 0x72, 0xdf, 0x12, 0x1f, 0x81, 0xe7, 0x5c, 0x46, 0x37, 0x44, 0x7f, 0x26, 0x8d, 0x5d,
	0x4c, 0x65, 0xd8, 0xec, 0x2d, 0xf8, 0x74, 0x9b, 0x63, 0x60, 0xcd, 0xcc, 0xb0, 0x22, 0xbe, 0xc7,
	0x1d, 0xfe, 0x18, 0xce, 0x8f, 0x1a, 0x22, 0xb0, 0x3b, 0x7b, 0x05, 0xec, 0xe4, 0xea, 0x06, 0xe0,
	0xaf, 0xd6, 0x9f, 0x76, 0x48, 0x1f, 0x42, 0xaf, 0x8e, 0x3e, 0x20, 0x69, 0x06, 0xe1, 0x3f, 0x67,
	0x76, 0x06, 0xde, 0xcd, 0x75, 0x84, 0x2c, 0x0c, 0x76, 0x57, 0xd1, 0xb8, 0xfb, 0x27, 0x00, 0x00,
	0xff, 0xff, 0x87, 0x75, 0x20, 0x09, 0x51, 0x03, 0x00, 0x00,
}
